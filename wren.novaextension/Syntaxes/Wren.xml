<?xml version="1.0" encoding="UTF-8"?>
<syntax name="wren">
    <meta>
        <name>Wren</name>
        <type>script</type>
        <preferred-file-extension>wren</preferred-file-extension>
    </meta>

    <detectors>
        <extension priority="1.0">wren</extension>
        <match-content priority="0.5" lines="50">class [A-Z][A-Za-z]* \{</match-content>
    </detectors>

    <indentation>
        <increase>
            <expression>^\s*(\{\s*)$</expression>
        </increase>
        <decrease>
            <expression>^\s*(\})</expression>
        </decrease>
    </indentation>

    <comments>
        <!-- TODO: Support nested comments -->
        <!-- e.g. `/* This is /* a nested */ comment. */` -->
        <multiline>
            <starts-with>
                <expression>\/\*</expression>
            </starts-with>
            <ends-with>
                <expression>\*\/</expression>
            </ends-with>
        </multiline>
    </comments>

    <brackets>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
    </brackets>

    <surrounding-pairs>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&quot;" close="&quot;" />
    </surrounding-pairs>

    <scopes>
        <!-- Meta -->
        <scope name="wren.meta.processing">
            <starts-with>
                <expression>&lt;\?wren</expression>
            </starts-with>
            <ends-with>
                <expression>\?&gt;</expression>
            </ends-with>
        </scope>

        <!-- Comments -->
        <scope name="wren.comment" spell-check="true">
            <starts-with>
                <expression>\/\/</expression>
            </starts-with>
            <ends-with>
                <expression>$</expression>
            </ends-with>
        </scope>
        <scope name="wren.comment.block" spell-check="true">
            <starts-with>
                <expression>\/\*</expression>
            </starts-with>
            <ends-with>
                <expression>\*\/</expression>
            </ends-with>
        </scope>

        <include syntax="self" collection="keywords" />
        <include syntax="self" collection="strings" />
        <include syntax="self" collection="values" />
        <include syntax="self" collection="identifiers" />
        <include syntax="self" collection="blocks" />

        <!-- Classes -->
        <scope name="wren.class">
            <symbol type="class">
                <context behavior="subtree" />
            </symbol>
            <starts-with>
                <expression>\b(class)\s+([A-Z][A-Za-z0-9_]+)\b</expression>
                <capture number="1" name="wren.keyword.class" />
                <capture number="2" name="wren.identifier" />
            </starts-with>
            <ends-with />
            <subscopes anchored="true">
                <include syntax="self" collection="block" />
            </subscopes>
        </scope>
    </scopes>

    <collections>
        <!-- Blocks -->
        <collection name="blocks">
            <scope name="wren.block">
                <symbol type="block">
                    <context behavior="subtree" />
                </symbol>
                <starts-with>
                    <expression>\{</expression>
                    <capture number="0" name="wren.block.bracket" />
                </starts-with>
                <ends-with>
                    <expression>\}</expression>
                    <capture number="0" name="wren.block.bracket" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="members" />
                    <include syntax="self" />
                </subscopes>
            </scope>
        </collection>

        <!-- Keywords -->
        <collection name="keywords">
            <scope name="wren.keyword">
                <strings word-boundary="true">
                    <string>as</string>
                    <string>break</string>
                    <string>class</string>
                    <string>construct</string>
                    <string>continue</string>
                    <string>else</string>
                    <string>false</string>
                    <string>for</string>
                    <string>foreign</string>
                    <string>if</string>
                    <string>import</string>
                    <string>in</string>
                    <string>is</string>
                    <string>null</string>
                    <string>return</string>
                    <string>static</string>
                    <string>super</string>
                    <string>this</string>
                    <string>true</string>
                    <string>var</string>
                    <string>while</string>
                </strings>
            </scope>
        </collection>
        
        <!-- Identifiers -->
        <collection name="identifiers">
            <scope name="wren.identifier" spell-check="true" >
                <expression>[A-Za-z0-9_]+</expression>
            </scope>
        </collection>
        
        <!-- Values -->
        <collection name="values">
            <!-- Boolean -->
            <scope name="wren.literal.boolean">
                <strings word-boundary="true">
                    <string>true</string>
                    <string>false</string>
                </strings>
            </scope>
            <!-- Number -->
            <scope name="wren.literal.number">
                <!-- FIXME: Support scientific and hexadecimal notation -->
                <!--
                    0.0314159e02
                    0.0314159e+02
                    314.159e-02
                    0xcaffe2
                -->
                <expression>-?[\-0-9]+(\.?[\-0-9]+)?</expression>
            </scope>
            <!-- TODO: Add Ranges (See https://wren.io/values.html#ranges) -->
            <scope name="wren.literal.null">
                <expression>null</expression>
            </scope>
            <scope name="wren.literal.list">
                <starts-with>
                    <expression>\[</expression>
                    <capture number="0" name="wren.delimiter.bracket" />
                </starts-with>
                <ends-with>
                    <expression>\]</expression>
                    <capture number="0" name="wren.delimiter.bracket" />
                </ends-with>
                <subscopes>
                    <include syntax="self" collection="identifiers" />
                    <include syntax="self" collection="values" />
                    <include syntax="self" collection="strings" />
                </subscopes>
            </scope>
        </collection>
        <collection name="strings">
            <!-- Strings -->
            <scope name="wren.literal.string.raw">
                <starts-with>
                    <expression>"""</expression>
                    <capture number="0" name="wren.delimiter.quote" />
                </starts-with>
                <ends-with>
                    <expression>"""</expression>
                    <capture number="0" name="wren.delimiter.quote" />
                </ends-with>
            </scope>
            <scope name="wren.literal.string">
                <starts-with>
                    <expression>"</expression>
                    <capture number="0" name="wren.delimiter.quote" />
                </starts-with>
                <ends-with>
                    <expression>"</expression>
                    <capture number="0" name="wren.delimiter.quote" />
                </ends-with>
                <subscopes>
                    <scope name="wren.literal.string.interpolation">
                        <starts-with>
                            <expression>\%\(</expression>
                            <capture number="0" name="wren.delimiter.quote" />
                        </starts-with>
                        <ends-with>
                            <expression>\)</expression>
                            <capture number="0" name="wren.delimiter.quote" />
                        </ends-with>
                        <subscopes>
                            <include syntax="self" collection="identifiers" />
                            <include syntax="self" collection="values" />
                        </subscopes>
                    </scope>
                </subscopes>
            </scope>
        </collection>
        <collection name="members">
            <scope name="wren.class.field" spell-check="true">
                <expression>_[A-Za-z0-9_]+</expression>
            </scope>
            <scope name="wren.class.method" optional="true">
                <starts-with>
                    <expression>([a-z][A-Za-z_]+)\b</expression>
                    <capture number="1" name="wren.identifier.method" />
                </starts-with>
                <ends-with />
                <subscopes anchored="true">
                    <scope name="wren.method.arguments">
                        <starts-with>
                            <expression>\(</expression>
                            <capture number="0" name="mylang.function.arguments.bracket" />
                        </starts-with>
                        <ends-with>
                            <expression>\)</expression>
                            <capture number="0" name="mylang.function.arguments.bracket" />
                        </ends-with>
                        <subscopes>
                            <include syntax="self" collection="identifiers" />
                        </subscopes>
                    </scope>
                    <scope name="wren.method.body">
                        <symbol type="block">
                            <context behavior="subtree" />
                        </symbol>
                        <starts-with>
                            <expression>\{</expression>
                            <capture number="0" name="wren.block.bracket" />
                        </starts-with>
                        <ends-with>
                            <expression>\}</expression>
                            <capture number="0" name="wren.block.bracket" />
                        </ends-with>
                        <subscopes>
                            <!-- ... -->
                        </subscopes>
                    </scope>
                </subscopes>
            </scope>
            <scope name="wren.class.getter" optional="true">
                <starts-with>
                    <expression>([a-z][A-Za-z_]+)\b</expression>
                    <capture number="1" name="wren.identifier.getter" />
                </starts-with>
                <ends-with />
                <subscopes anchored="true">
                    <scope name="wren.getter.body">
                        <symbol type="block">
                            <context behavior="subtree" />
                        </symbol>
                        <starts-with>
                            <expression>\{</expression>
                            <capture number="0" name="wren.block.bracket" />
                        </starts-with>
                        <ends-with>
                            <expression>\}</expression>
                            <capture number="0" name="wren.block.bracket" />
                        </ends-with>
                        <subscopes>
                            <include syntax="self" />
                        </subscopes>
                    </scope>
                </subscopes>
            </scope>
            <scope name="wren.class.setter" optional="true">
                <starts-with>
                    <expression>([a-z][A-Za-z_]+)=\b</expression>
                    <capture number="1" name="wren.identifier.setter" />
                </starts-with>
                <ends-with />
                <subscopes anchored="true">
                    <scope name="wren.setter.arguments">
                        <starts-with>
                            <expression>\(</expression>
                            <capture number="0" name="mylang.function.arguments.bracket" />
                        </starts-with>
                        <ends-with>
                            <expression>\)</expression>
                            <capture number="0" name="mylang.function.arguments.bracket" />
                        </ends-with>
                        <subscopes>
                            <include syntax="self" collection="identifiers" />
                        </subscopes>
                    </scope>
                    <scope name="wren.method.body">
                        <symbol type="block">
                            <context behavior="subtree" />
                        </symbol>
                        <starts-with>
                            <expression>\{</expression>
                            <capture number="0" name="wren.block.bracket" />
                        </starts-with>
                        <ends-with>
                            <expression>\}</expression>
                            <capture number="0" name="wren.block.bracket" />
                        </ends-with>
                        <subscopes>
                            <include syntax="self" />
                        </subscopes>
                    </scope>
                </subscopes>
            </scope>
        </collection>
    </collections>
</syntax>
